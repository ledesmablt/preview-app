type DraftUploadFile {
  draftId: String
  fileUrl: String
  signedUrl: String
}

type LoginResult {
  seller: Seller
  token: String
}

type Mutation {
  create_product: Product
  delete_product(id: String): Boolean
  logout: Boolean
  seller_login(emailOrUsername: String, password: String): LoginResult
  seller_signup(confirmPassword: String, email: String, password: String, username: String): LoginResult
  update_product(audioPreviewDraftId: String, audioProductDraftId: String, currency: String, description: String, enabled: Boolean, id: String, imageDraftId: String, name: String, price: Float): Product
  update_seller(bio: String, email: String, password: String, userImageDraftId: String): Seller
  upload_product_draft_audio_preview(contentType: String, id: String): DraftUploadFile
  upload_product_draft_audio_product(contentType: String, id: String): DraftUploadFile
  upload_product_draft_display_image(contentType: String, id: String): DraftUploadFile
  upload_seller_draft_user_image(contentType: String): DraftUploadFile
}

type Product {
  audioPreviewUrl: String
  audioProductUrl: String
  currency: String
  description: String
  enabled: Boolean
  id: ID!
  imageUrl: String
  name: String
  price: Float
  seller: Seller!
  sellerId: ID!
}

type Query {
  get_product(fromShop: Boolean, id: String): Product
  get_seller(id: String, username: String): Seller
}

type Seller {
  bio: String
  email: String!
  id: ID!
  password: String
  products(fromShop: Boolean): [Product!]
  userImageUrl: String
  username: String!
}
